import numpy as np
from scipy.ndimage import label
import matplotlib.pyplot as plt

def autolabel(rects):
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x()+rect.get_width()/2., 1.05*height, '%d'%int(height),
                ha='center', va='bottom')

subject_list = ['lap002','lap004','lap005','lap006']

data = {}
data['lap002'] = [(['lap002_run1_cb1_summary.txt'],'vsa_sequence'),(['lap002_run2_cb1_summary.txt'],'vsa_perturb')]
data['lap004'] = [(['lap004_run2_cb2_summary.txt'],'vsa_sequence'),(['lap004_run1_cb2_summary.txt'],'vsa_perturb')]
data['lap005'] = [(['lap005_run1_cb1_summary.txt'],'vsa_sequence'),(['lap005_run2_cb1_summary.txt'],'vsa_perturb')]
data['lap006'] = [(['lap006_run2_cb2_summary.txt'],'vsa_sequence'),(['lap006_run1_cb2_summary.txt'],'vsa_perturb')]

condition={'RD':1,'SD':2,'RI':3, 1:'RD',2:'SD',3:'RI'}

avg_error=[]
endpoint_error=[]
accuracy=[]

chunk_size = 8
for subject in subject_list:
    avg_error = []
    fig = plt.figure()
    ax = fig.add_subplot(111)

    sequence_labels = []
    sequence_data_file = data[subject][1][0][0]
    sequence_data = np.genfromtxt(sequence_data_file,skip_header=True)
    sequence_data = sequence_data[sequence_data[:,1]!=0]
    conditions = sequence_data[:,1]

    for chunk in range(len(sequence_data)/chunk_size):
            

        chunk_data = sequence_data[chunk*chunk_size:(chunk+1)*chunk_size]
        chunk_cond = condition[np.mean(chunk_data[:,1])]
        chunk_correct = chunk_data[:,10] == 1
        chunk_avg_error = chunk_data[:,6]
        ax.plot(np.arange(chunk*chunk_size,(chunk+1)*chunk_size)/chunk_size,chunk_data[:,6],'o',color='black',alpha='0.2',linestyle='None')
            
        sequence_labels.append(chunk_cond)

        avg_error.append(chunk_avg_error)

    median_avg_error = [np.median(times) for times in avg_error]
    ind = np.arange(len(sequence_labels))
    width = 0
    linewidth = 0
    rects = ax.bar(ind, 
         median_avg_error, 
         width=width,
         linewidth=linewidth, 
         color = 'b',
         yerr = [np.std(times)/np.sqrt(len(times)) for times in avg_error],
         ecolor = 'k')

    for idx,median in enumerate(median_avg_error):
        color = 'blue' if sequence_labels[idx] == 'RI' else 'red'
        ax.plot(idx,median,'o',linestyle='None',color = color)


    #fix subsequently
    medians = []
    start_idx = None
    end_idx = None
    curr_val = None
    for idx,val in enumerate(sequence_labels):
        try:
            print idx
            if curr_val == val:
                print "y"
                medians.append(median_avg_error[idx])
                if idx == len(sequence_labels) - 1:
                    print "DONE!"
                    curr_val = val
                    end_idx = idx+1
                    print start_idx, end_idx
                    ax.plot(np.arange(start_idx,end_idx),np.repeat(np.mean(medians),end_idx - start_idx),linewidth=4,color='black')

                    medians = []
                    medians.append(median_avg_error[idx])
                    start_idx = idx
                
            
            else:
                    print "n"
                    curr_val = val
                    end_idx = idx
                    print start_idx, end_idx
                    ax.plot(np.arange(start_idx,end_idx),np.repeat(np.mean(medians),end_idx - start_idx),linewidth=4,color='black')
                    medians = []
                    medians.append(median_avg_error[idx])
                    start_idx = idx
             
        except:
            medians = []
            curr_val = val
            start_idx = idx
            print "start idx!: %d"%(idx)
            medians.append(median_avg_error[idx])

    skill_scores = []
    indexes = []
    for i in [0,1,2,3]:
        rd_block_1 = sequence_data[(48+16)*i:(48+16)*i+16,6]
        sd = sequence_data[(48+16)*i+16:(48+16)*i+48,6]
        rd_block_2 = sequence_data[(48+16)*i+48:(48+16)*i+48+16,6]
        idx_i = (48+16)*i+48
        indexes.append(idx_i)
        rd = np.hstack([rd_block_1,rd_block_2])
        skill_score = (np.median(rd)-np.median(sd))/np.median(rd)
        skill_scores.append(skill_score)
        ax.text(idx_i/8 - 1,20+5*skill_score,'%0.4f'%(skill_score))
        ax.scatter(idx_i/8 - 1,20+6*skill_score,s=100,facecolor='gray')
    print skill_scores

    ax.set_ylabel('Magnitude (cm)')
    ax.set_title('%s Perturb Average Error'%(subject))
    ax.set_xticks(ind+width)
    ax.set_xticklabels(sequence_labels)
    ax.set_ylim([0,25])
    #autolabel(rects)
    plt.show()


